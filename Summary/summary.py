'''
    API Part4 总结
    输入：
        前三个API输出的项目范围、
    输出：
        完整的排查步骤

'''

#TODO: 输出中补充政策制度及管理办法、风险判定逻辑

import json

# API1 输出
PROJECT_RANGE = ""
# # API2 输出
RISKS = []
# API3 输出
RISK2METHOD = [
    {
        "风险点": "预转资异常",
        "风险判定逻辑": "1.预转资日期＞投运日期\n2.预转资日期-投运日期＞30天",
        "比对字段": [
            "预转资日期",
            "投运日期"
        ],
        "审计风险描述": "对比项目投运日期和预转资日期，当预转资日期 >投运日期 + 30天，视为预转资超期，当预转资日期 <投运日期，视为预转资提前。"
    },
    {
        "风险点": "审定结算不及时",
        "风险判定逻辑": "1.工程结算日期-投运日期>100天\n2.工程结算日期-投运日期>60天",
        "比对字段": [
            "工程结算日期",
            "投运日期"
        ],
        "审计风险描述": "对比项目投运日期和工程结算日期:\n1.项目类型为11、13、15，工程结算日期>投运日期+100天\n2.其他资本性项目，工程结算日期>投运日期+60天"
    }
    ]

def summary_Method(PROJECT_RANGE, RISKS, RISK2METHOD):
    # 2022至2024年度综合计划项目
    OUTPUT = f'''
(1)项目清单范围确定：通过SQL脚本+API从数据中台获取{PROJECT_RANGE}，筛选出南平公司光泽县公司负责的已竣工资本性投资项目清单。'''
    # (2)预转资异常排查：利用业数图谱推理出“工程投运日期、第一次转资日期”关键数据的来源，通过SQL脚本+API从数据中台相关数据，结合审计依据，根据逻辑推理的工程预转资异常判断规则，排查确定预转资提前或超期疑点。
    # (3)工程正式转资异常排查
    # (4)资产账面价值与实际造价不符排查
    # (5).....
    for cnt, RISK in enumerate(RISK2METHOD):
        risk = RISK["风险点"]
        key_data = "、".join(RISK["比对字段"])
        desc = RISK["审计风险描述"].replace("\n", " ")
        OUTPUT += f"\n({cnt+2}){risk}排查：利用业数图谱推理出“{key_data}”关键数据的来源，通过SQL脚本+API从数据中台相关数据，{desc}"

    return OUTPUT


if __name__ == '__main__':
    output = summary_Method(PROJECT_RANGE, RISKS, RISK2METHOD)
    print(output)